// <auto-generated />
using System;
using MetricDashboard.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MetricDashboard.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240429190911_AddedTimeScopeToResultsAndSettingSeed")]
    partial class AddedTimeScopeToResultsAndSettingSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MetricDashboard.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MetricDashboard.Data.Models.ColorRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<int>("RadialSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("To")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RadialSettingsId");

                    b.ToTable("ColorRanges");

                    b.HasData(
                        new
                        {
                            Id = 15,
                            Color = 0,
                            From = 0,
                            RadialSettingsId = 5,
                            To = 5
                        },
                        new
                        {
                            Id = 16,
                            Color = 1,
                            From = 5,
                            RadialSettingsId = 5,
                            To = 10
                        },
                        new
                        {
                            Id = 17,
                            Color = 2,
                            From = 10,
                            RadialSettingsId = 5,
                            To = 20
                        },
                        new
                        {
                            Id = 18,
                            Color = 0,
                            From = 0,
                            RadialSettingsId = 6,
                            To = 12
                        },
                        new
                        {
                            Id = 19,
                            Color = 1,
                            From = 12,
                            RadialSettingsId = 6,
                            To = 30
                        },
                        new
                        {
                            Id = 20,
                            Color = 2,
                            From = 30,
                            RadialSettingsId = 6,
                            To = 50
                        },
                        new
                        {
                            Id = 21,
                            Color = 0,
                            From = 90,
                            RadialSettingsId = 7,
                            To = 100
                        },
                        new
                        {
                            Id = 22,
                            Color = 1,
                            From = 75,
                            RadialSettingsId = 7,
                            To = 90
                        },
                        new
                        {
                            Id = 23,
                            Color = 2,
                            From = 0,
                            RadialSettingsId = 7,
                            To = 75
                        },
                        new
                        {
                            Id = 24,
                            Color = 0,
                            From = 0,
                            RadialSettingsId = 8,
                            To = 2
                        },
                        new
                        {
                            Id = 25,
                            Color = 1,
                            From = 2,
                            RadialSettingsId = 8,
                            To = 10
                        },
                        new
                        {
                            Id = 26,
                            Color = 2,
                            From = 10,
                            RadialSettingsId = 8,
                            To = 100
                        },
                        new
                        {
                            Id = 27,
                            Color = 0,
                            From = 8,
                            RadialSettingsId = 9,
                            To = 10
                        },
                        new
                        {
                            Id = 28,
                            Color = 1,
                            From = 6,
                            RadialSettingsId = 9,
                            To = 8
                        },
                        new
                        {
                            Id = 29,
                            Color = 2,
                            From = 0,
                            RadialSettingsId = 9,
                            To = 6
                        },
                        new
                        {
                            Id = 30,
                            Color = 0,
                            From = 0,
                            RadialSettingsId = 10,
                            To = 3
                        },
                        new
                        {
                            Id = 31,
                            Color = 1,
                            From = 3,
                            RadialSettingsId = 10,
                            To = 8
                        },
                        new
                        {
                            Id = 32,
                            Color = 2,
                            From = 8,
                            RadialSettingsId = 10,
                            To = 36
                        },
                        new
                        {
                            Id = 33,
                            Color = 0,
                            From = 90,
                            RadialSettingsId = 11,
                            To = 100
                        },
                        new
                        {
                            Id = 34,
                            Color = 1,
                            From = 75,
                            RadialSettingsId = 11,
                            To = 90
                        },
                        new
                        {
                            Id = 35,
                            Color = 2,
                            From = 0,
                            RadialSettingsId = 11,
                            To = 75
                        },
                        new
                        {
                            Id = 36,
                            Color = 0,
                            From = 24,
                            RadialSettingsId = 12,
                            To = 180
                        },
                        new
                        {
                            Id = 37,
                            Color = 1,
                            From = 6,
                            RadialSettingsId = 12,
                            To = 24
                        },
                        new
                        {
                            Id = 38,
                            Color = 2,
                            From = 0,
                            RadialSettingsId = 12,
                            To = 6
                        },
                        new
                        {
                            Id = 39,
                            Color = 0,
                            From = 0,
                            RadialSettingsId = 13,
                            To = 1
                        },
                        new
                        {
                            Id = 40,
                            Color = 1,
                            From = 1,
                            RadialSettingsId = 13,
                            To = 4
                        },
                        new
                        {
                            Id = 41,
                            Color = 2,
                            From = 4,
                            RadialSettingsId = 13,
                            To = 36
                        },
                        new
                        {
                            Id = 42,
                            Color = 0,
                            From = 0,
                            RadialSettingsId = 14,
                            To = 1
                        },
                        new
                        {
                            Id = 43,
                            Color = 1,
                            From = 1,
                            RadialSettingsId = 14,
                            To = 3
                        },
                        new
                        {
                            Id = 44,
                            Color = 2,
                            From = 3,
                            RadialSettingsId = 14,
                            To = 14
                        },
                        new
                        {
                            Id = 45,
                            Color = 0,
                            From = 8,
                            RadialSettingsId = 15,
                            To = 10
                        },
                        new
                        {
                            Id = 46,
                            Color = 1,
                            From = 6,
                            RadialSettingsId = 15,
                            To = 8
                        },
                        new
                        {
                            Id = 47,
                            Color = 2,
                            From = 0,
                            RadialSettingsId = 15,
                            To = 6
                        },
                        new
                        {
                            Id = 48,
                            Color = 0,
                            From = 0,
                            RadialSettingsId = 16,
                            To = 1
                        },
                        new
                        {
                            Id = 49,
                            Color = 1,
                            From = 1,
                            RadialSettingsId = 16,
                            To = 3
                        },
                        new
                        {
                            Id = 50,
                            Color = 2,
                            From = 3,
                            RadialSettingsId = 16,
                            To = 10
                        },
                        new
                        {
                            Id = 51,
                            Color = 0,
                            From = 3000,
                            RadialSettingsId = 17,
                            To = 5000
                        },
                        new
                        {
                            Id = 52,
                            Color = 1,
                            From = 1500,
                            RadialSettingsId = 17,
                            To = 3000
                        },
                        new
                        {
                            Id = 53,
                            Color = 2,
                            From = 0,
                            RadialSettingsId = 17,
                            To = 1500
                        },
                        new
                        {
                            Id = 54,
                            Color = 0,
                            From = 0,
                            RadialSettingsId = 18,
                            To = 1
                        },
                        new
                        {
                            Id = 55,
                            Color = 1,
                            From = 1,
                            RadialSettingsId = 18,
                            To = 2
                        },
                        new
                        {
                            Id = 56,
                            Color = 2,
                            From = 2,
                            RadialSettingsId = 18,
                            To = 5
                        },
                        new
                        {
                            Id = 57,
                            Color = 0,
                            From = 0,
                            RadialSettingsId = 19,
                            To = 16
                        },
                        new
                        {
                            Id = 58,
                            Color = 1,
                            From = 16,
                            RadialSettingsId = 19,
                            To = 36
                        },
                        new
                        {
                            Id = 59,
                            Color = 2,
                            From = 36,
                            RadialSettingsId = 19,
                            To = 72
                        },
                        new
                        {
                            Id = 60,
                            Color = 0,
                            From = 24,
                            RadialSettingsId = 20,
                            To = 60
                        },
                        new
                        {
                            Id = 61,
                            Color = 1,
                            From = 12,
                            RadialSettingsId = 20,
                            To = 24
                        },
                        new
                        {
                            Id = 62,
                            Color = 2,
                            From = 0,
                            RadialSettingsId = 20,
                            To = 12
                        });
                });

            modelBuilder.Entity("MetricDashboard.Data.Models.GlobalMetricSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GreenCalculationValue")
                        .HasColumnType("int");

                    b.Property<int>("RedCalculationValue")
                        .HasColumnType("int");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<int>("SprintLength")
                        .HasColumnType("int");

                    b.Property<int>("YellowCalculationValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GlobalMetricSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GreenCalculationValue = 10,
                            RedCalculationValue = 1,
                            Scope = 1,
                            SprintLength = 14,
                            YellowCalculationValue = 5
                        });
                });

            modelBuilder.Entity("MetricDashboard.Data.Models.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<int>("MetricEnum")
                        .HasColumnType("int");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Metrics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDisabled = false,
                            MetricEnum = 0,
                            Settings = "",
                            System = 0
                        },
                        new
                        {
                            Id = 2,
                            IsDisabled = false,
                            MetricEnum = 1,
                            Settings = "",
                            System = 0
                        },
                        new
                        {
                            Id = 3,
                            IsDisabled = false,
                            MetricEnum = 2,
                            Settings = "",
                            System = 0
                        },
                        new
                        {
                            Id = 4,
                            IsDisabled = false,
                            MetricEnum = 3,
                            Settings = "",
                            System = 0
                        },
                        new
                        {
                            Id = 5,
                            IsDisabled = false,
                            MetricEnum = 4,
                            Settings = "",
                            System = 1
                        },
                        new
                        {
                            Id = 6,
                            IsDisabled = false,
                            MetricEnum = 5,
                            Settings = "",
                            System = 1
                        },
                        new
                        {
                            Id = 7,
                            IsDisabled = false,
                            MetricEnum = 6,
                            Settings = "",
                            System = 1
                        },
                        new
                        {
                            Id = 8,
                            IsDisabled = false,
                            MetricEnum = 7,
                            Settings = "",
                            System = 1
                        },
                        new
                        {
                            Id = 9,
                            IsDisabled = false,
                            MetricEnum = 8,
                            Settings = "",
                            System = 1
                        },
                        new
                        {
                            Id = 10,
                            IsDisabled = false,
                            MetricEnum = 9,
                            Settings = "",
                            System = 1
                        },
                        new
                        {
                            Id = 11,
                            IsDisabled = false,
                            MetricEnum = 10,
                            Settings = "",
                            System = 1
                        },
                        new
                        {
                            Id = 12,
                            IsDisabled = false,
                            MetricEnum = 11,
                            Settings = "",
                            System = 1
                        },
                        new
                        {
                            Id = 13,
                            IsDisabled = false,
                            MetricEnum = 12,
                            Settings = "",
                            System = 1
                        },
                        new
                        {
                            Id = 14,
                            IsDisabled = false,
                            MetricEnum = 13,
                            Settings = "",
                            System = 1
                        },
                        new
                        {
                            Id = 15,
                            IsDisabled = false,
                            MetricEnum = 14,
                            Settings = "",
                            System = 1
                        },
                        new
                        {
                            Id = 16,
                            IsDisabled = false,
                            MetricEnum = 15,
                            Settings = "",
                            System = 1
                        });
                });

            modelBuilder.Entity("MetricDashboard.Data.Models.MetricResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MetricEnum")
                        .HasColumnType("int");

                    b.Property<string>("ObjectsAffectingScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("TimeScope")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MetricResults");
                });

            modelBuilder.Entity("MetricDashboard.Data.Models.RadialSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("End")
                        .HasColumnType("int");

                    b.Property<int>("MetricEnum")
                        .HasColumnType("int");

                    b.Property<int>("MetricId")
                        .HasColumnType("int");

                    b.Property<string>("PointerUnits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Start")
                        .HasColumnType("int");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MetricId")
                        .IsUnique();

                    b.ToTable("RadialSettings");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            End = 20,
                            MetricEnum = 10,
                            MetricId = 13,
                            PointerUnits = "days",
                            Start = 0,
                            Step = 5
                        },
                        new
                        {
                            Id = 6,
                            End = 50,
                            MetricEnum = 6,
                            MetricId = 7,
                            PointerUnits = "bugs",
                            Start = 0,
                            Step = 5
                        },
                        new
                        {
                            Id = 7,
                            End = 100,
                            MetricEnum = 15,
                            MetricId = 16,
                            PointerUnits = "%",
                            Start = 0,
                            Step = 10
                        },
                        new
                        {
                            Id = 8,
                            End = 100,
                            MetricEnum = 3,
                            MetricId = 4,
                            PointerUnits = "%",
                            Start = 0,
                            Step = 10
                        },
                        new
                        {
                            Id = 9,
                            End = 10,
                            MetricEnum = 5,
                            MetricId = 8,
                            PointerUnits = "",
                            Start = 0,
                            Step = 1
                        },
                        new
                        {
                            Id = 10,
                            End = 36,
                            MetricEnum = 8,
                            MetricId = 12,
                            PointerUnits = "h",
                            Start = 0,
                            Step = 6
                        },
                        new
                        {
                            Id = 11,
                            End = 100,
                            MetricEnum = 9,
                            MetricId = 10,
                            PointerUnits = "%",
                            Start = 0,
                            Step = 10
                        },
                        new
                        {
                            Id = 12,
                            End = 180,
                            MetricEnum = 0,
                            MetricId = 1,
                            PointerUnits = "deployments",
                            Start = 0,
                            Step = 20
                        },
                        new
                        {
                            Id = 13,
                            End = 36,
                            MetricEnum = 1,
                            MetricId = 3,
                            PointerUnits = "h",
                            Start = 0,
                            Step = 6
                        },
                        new
                        {
                            Id = 14,
                            End = 14,
                            MetricEnum = 1,
                            MetricId = 2,
                            PointerUnits = "days",
                            Start = 0,
                            Step = 1
                        },
                        new
                        {
                            Id = 15,
                            End = 10,
                            MetricEnum = 3,
                            MetricId = 5,
                            PointerUnits = "",
                            Start = 0,
                            Step = 1
                        },
                        new
                        {
                            Id = 16,
                            End = 10,
                            MetricEnum = 14,
                            MetricId = 15,
                            PointerUnits = "h",
                            Start = 0,
                            Step = 1
                        },
                        new
                        {
                            Id = 17,
                            End = 5000,
                            MetricEnum = 7,
                            MetricId = 9,
                            PointerUnits = "objects",
                            Start = 0,
                            Step = 500
                        },
                        new
                        {
                            Id = 18,
                            End = 5,
                            MetricEnum = 13,
                            MetricId = 14,
                            PointerUnits = "handovers",
                            Start = 0,
                            Step = 1
                        },
                        new
                        {
                            Id = 19,
                            End = 72,
                            MetricEnum = 12,
                            MetricId = 11,
                            PointerUnits = "h",
                            Start = 0,
                            Step = 4
                        },
                        new
                        {
                            Id = 20,
                            End = 60,
                            MetricEnum = 4,
                            MetricId = 6,
                            PointerUnits = "months",
                            Start = 0,
                            Step = 6
                        });
                });

            modelBuilder.Entity("MetricDashboard.Data.Models.SystemResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("SystemEnum")
                        .HasColumnType("int");

                    b.Property<int>("TimeScope")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SystemResults");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MetricDashboard.Data.Models.ColorRange", b =>
                {
                    b.HasOne("MetricDashboard.Data.Models.RadialSettings", null)
                        .WithMany("ColorRanges")
                        .HasForeignKey("RadialSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MetricDashboard.Data.Models.RadialSettings", b =>
                {
                    b.HasOne("MetricDashboard.Data.Models.Metric", null)
                        .WithOne("RadialSettings")
                        .HasForeignKey("MetricDashboard.Data.Models.RadialSettings", "MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MetricDashboard.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MetricDashboard.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetricDashboard.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MetricDashboard.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MetricDashboard.Data.Models.Metric", b =>
                {
                    b.Navigation("RadialSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("MetricDashboard.Data.Models.RadialSettings", b =>
                {
                    b.Navigation("ColorRanges");
                });
#pragma warning restore 612, 618
        }
    }
}
