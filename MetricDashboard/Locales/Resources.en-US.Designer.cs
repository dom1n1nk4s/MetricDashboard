//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MetricDashboard.Locales {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MetricDashboard.Locales.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bug Count represents the number of bugs reported or detected within a system or software application. It serves as a key metric for assessing software quality and identifying areas requiring improvement. Monitoring and managing bug counts help to ensure product stability, reliability, and user satisfaction..
        /// </summary>
        public static string BUG_COUNT_Desc {
            get {
                return ResourceManager.GetString("BUG_COUNT.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bug Count.
        /// </summary>
        public static string BUG_COUNT_Name {
            get {
                return ResourceManager.GetString("BUG_COUNT.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Business Value Percentage represents the percentage of time spent bringing business value compared to the overall time spent on work tasks. It measures the alignment of work activities with business objectives and the proportion of effort dedicated to value-added activities. Maximizing the business value percentage helps to prioritize tasks, optimize resource allocation, and enhance organizational effectiveness..
        /// </summary>
        public static string BUSINESS_VALUE_PERCENTAGE_Desc {
            get {
                return ResourceManager.GetString("BUSINESS_VALUE_PERCENTAGE.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Business Value Percentage.
        /// </summary>
        public static string BUSINESS_VALUE_PERCENTAGE_Name {
            get {
                return ResourceManager.GetString("BUSINESS_VALUE_PERCENTAGE.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change Failure Rate calculates the rate of failed changes relative to the total changes attempted within a specific timeframe. It provides insights into the stability and reliability of the deployment process. A high failure rate may indicate issues such as inadequate testing, configuration errors, or complexity in deployment procedures..
        /// </summary>
        public static string CHANGE_FAILURE_RATE_Desc {
            get {
                return ResourceManager.GetString("CHANGE_FAILURE_RATE.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change Failure Rate.
        /// </summary>
        public static string CHANGE_FAILURE_RATE_Name {
            get {
                return ResourceManager.GetString("CHANGE_FAILURE_RATE.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client Satisfaction Survey measures the satisfaction level of clients or customers with the products or services provided by the organization. It gathers feedback from clients regarding various aspects of their experience, such as product quality, customer support, and overall satisfaction. High satisfaction levels are essential for customer retention and loyalty..
        /// </summary>
        public static string CLIENT_SATISFACTION_SURVEY_Desc {
            get {
                return ResourceManager.GetString("CLIENT_SATISFACTION_SURVEY.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client Satisfaction Survey.
        /// </summary>
        public static string CLIENT_SATISFACTION_SURVEY_Name {
            get {
                return ResourceManager.GetString("CLIENT_SATISFACTION_SURVEY.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code Integration Time measures the time taken to integrate code changes into a shared repository or codebase. It reflects the efficiency of the integration process and the frequency of code integration activities within a development workflow. Shorter integration times facilitate faster feedback loops and enable continuous integration practices..
        /// </summary>
        public static string CODE_INTEGRATION_TIME_Desc {
            get {
                return ResourceManager.GetString("CODE_INTEGRATION_TIME.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code Integration Time.
        /// </summary>
        public static string CODE_INTEGRATION_TIME_Name {
            get {
                return ResourceManager.GetString("CODE_INTEGRATION_TIME.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code Review Participation measures the extent of participation in code review activities within a development team. It indicates the level of engagement and collaboration among team members in reviewing and improving code quality. Active participation in code reviews promotes knowledge sharing, code quality improvement, and adherence to best practices..
        /// </summary>
        public static string CODE_REVIEW_PARTICIPATION_Desc {
            get {
                return ResourceManager.GetString("CODE_REVIEW_PARTICIPATION.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code Review Participation.
        /// </summary>
        public static string CODE_REVIEW_PARTICIPATION_Name {
            get {
                return ResourceManager.GetString("CODE_REVIEW_PARTICIPATION.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code Task Merge Commit Count represents the number of code task merge commits made within a specified period. It quantifies the frequency of code changes and collaboration among team members. Monitoring this metric helps to track development activity, identify bottlenecks, and assess team productivity..
        /// </summary>
        public static string CODE_TASK_MERGE_COMMIT_COUNT_Desc {
            get {
                return ResourceManager.GetString("CODE_TASK_MERGE_COMMIT_COUNT.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code Task Merge Commit Count.
        /// </summary>
        public static string CODE_TASK_MERGE_COMMIT_COUNT_Name {
            get {
                return ResourceManager.GetString("CODE_TASK_MERGE_COMMIT_COUNT.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Frequency of deployments per period. This metric measures how often code changes are deployed to production within a specified time frame. It indicates the agility and efficiency of the deployment process, with higher frequencies typically associated with faster delivery cycles and shorter lead times..
        /// </summary>
        public static string DEPLOYMENT_FREQUENCY_Desc {
            get {
                return ResourceManager.GetString("DEPLOYMENT_FREQUENCY.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deployment Frequency.
        /// </summary>
        public static string DEPLOYMENT_FREQUENCY_Name {
            get {
                return ResourceManager.GetString("DEPLOYMENT_FREQUENCY.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed Deployment Recovery Time measures the time taken to recover from failed deployments. It reflects the efficiency of the incident response and recovery processes following unsuccessful deployments. Minimizing this time helps to reduce downtime, mitigate impact on users, and maintain system reliability and availability..
        /// </summary>
        public static string FAILED_DEPLOYMENT_RECOVERY_TIME_Desc {
            get {
                return ResourceManager.GetString("FAILED_DEPLOYMENT_RECOVERY_TIME.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed Deployment Recovery Time.
        /// </summary>
        public static string FAILED_DEPLOYMENT_RECOVERY_TIME_Name {
            get {
                return ResourceManager.GetString("FAILED_DEPLOYMENT_RECOVERY_TIME.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lead Time for Changes represents the time taken from code commit to deployment. It measures the elapsed time between the initiation of a code change (e.g., commit or merge) and its deployment to a production environment. A shorter lead time indicates faster delivery of changes, facilitating rapid feedback and iteration..
        /// </summary>
        public static string LEAD_TIME_FOR_CHANGES_Desc {
            get {
                return ResourceManager.GetString("LEAD_TIME_FOR_CHANGES.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lead Time for Changes.
        /// </summary>
        public static string LEAD_TIME_FOR_CHANGES_Name {
            get {
                return ResourceManager.GetString("LEAD_TIME_FOR_CHANGES.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Onboarding Time represents the time taken to onboard new employees or team members. It includes activities such as orientation, training, and familiarization with company policies, processes, and tools. Effective onboarding processes help to integrate new hires into the organization smoothly, accelerate their time to productivity, and improve retention rates..
        /// </summary>
        public static string ONBOARDING_TIME_Desc {
            get {
                return ResourceManager.GetString("ONBOARDING_TIME.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Onboarding Time.
        /// </summary>
        public static string ONBOARDING_TIME_Name {
            get {
                return ResourceManager.GetString("ONBOARDING_TIME.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Satisfaction Survey measures user satisfaction with the product or service. It typically involves collecting feedback from users through surveys or feedback mechanisms. High satisfaction levels indicate positive user experiences, while low levels may indicate areas for improvement or dissatisfaction with the product or service..
        /// </summary>
        public static string SATISFACTION_SURVEY_Desc {
            get {
                return ResourceManager.GetString("SATISFACTION_SURVEY.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Satisfaction Survey.
        /// </summary>
        public static string SATISFACTION_SURVEY_Name {
            get {
                return ResourceManager.GetString("SATISFACTION_SURVEY.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task Handovers Before Completion quantifies the number of handovers or transfers of tasks between individuals or teams before their completion. It reflects the complexity and efficiency of task management processes and communication channels within an organization. Minimizing task handovers can reduce delays, errors, and coordination overhead..
        /// </summary>
        public static string TASK_HANDOVERS_BEFORE_COMPLETION_Desc {
            get {
                return ResourceManager.GetString("TASK_HANDOVERS_BEFORE_COMPLETION.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task Handovers Before Completion.
        /// </summary>
        public static string TASK_HANDOVERS_BEFORE_COMPLETION_Name {
            get {
                return ResourceManager.GetString("TASK_HANDOVERS_BEFORE_COMPLETION.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Time Spent Working represents the amount of time spent by individuals on work-related tasks within a specified period. It includes time allocated to various activities such as coding, debugging, meetings, and administrative tasks. Monitoring time spent working helps to optimize productivity, allocate resources efficiently, and identify potential areas for improvement..
        /// </summary>
        public static string TIME_SPENT_WORKING_Desc {
            get {
                return ResourceManager.GetString("TIME_SPENT_WORKING.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Time Spent Working.
        /// </summary>
        public static string TIME_SPENT_WORKING_Name {
            get {
                return ResourceManager.GetString("TIME_SPENT_WORKING.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Worker Retention Rate calculates the percentage of workers retained over a specified period. It reflects the organization&apos;s ability to retain its workforce, which is crucial for maintaining institutional knowledge, productivity, and morale. A high retention rate is generally indicative of a positive work environment and effective talent management practices..
        /// </summary>
        public static string WORKER_RETENTION_RATE_Desc {
            get {
                return ResourceManager.GetString("WORKER_RETENTION_RATE.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Worker Retention Rate.
        /// </summary>
        public static string WORKER_RETENTION_RATE_Name {
            get {
                return ResourceManager.GetString("WORKER_RETENTION_RATE.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflow Interruption Time measures the time spent handling interruptions or disruptions to workflow activities. It includes interruptions such as meetings, emails, phone calls, and other distractions that divert attention from primary tasks. Minimizing workflow interruption time helps to improve focus, productivity, and task completion rates..
        /// </summary>
        public static string WORKFLOW_INTERRUPTION_TIME_Desc {
            get {
                return ResourceManager.GetString("WORKFLOW_INTERRUPTION_TIME.Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflow Interruption Time.
        /// </summary>
        public static string WORKFLOW_INTERRUPTION_TIME_Name {
            get {
                return ResourceManager.GetString("WORKFLOW_INTERRUPTION_TIME.Name", resourceCulture);
            }
        }
    }
}
