@using MetricDashboard.Data.Models
@using MetricDashboard.Services
@implements IDisposable
@inject NotificationService _notificationService
@inject CalculatorService _calculatorService
@inject IDbContextFactory<ApplicationDbContext> _dbFactory

<RadzenFieldset Text="Global settings" AllowCollapse=true>
    <RadzenStack>
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenLabel Text="Metric calculation status:" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenText Text="@runningStatus"/>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenButton Text="Start calculation" Disabled=@isRunning Click="RunCalculator"/>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenLabel Text="Scope" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenDropDown Data="@(Enum.GetValues(typeof(TimeScopeEnum)).Cast<Enum>().Except([TimeScopeEnum.NONE]))" @bind-Value=@globalSettings.Scope Style="width: 13rem" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenLabel Text="Custom scope length" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenNumeric ShowUpDown=false Min="1" @bind-Value=@globalSettings.SprintLength Style="width: 13rem" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenLabel Text="Green metric result score value" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenNumeric ShowUpDown=false Min="1" Max="10" @bind-Value=@globalSettings.GreenCalculationValue Style="width: 13rem" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenLabel Text="Yellow metric result score value" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenNumeric ShowUpDown=false Min="1" Max="10" @bind-Value=@globalSettings.YellowCalculationValue Style="width: 13rem" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenLabel Text="Red metric result score value" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenNumeric ShowUpDown=false Min="1" Max="10" @bind-Value=@globalSettings.RedCalculationValue Style="width: 13rem" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenFieldset>
@code {
    [CascadingParameter]
    public SaveState SaveState { get; set; }
    ApplicationDbContext _context;
    GlobalMetricSettings globalSettings;
    string name => "Global settings";
    string runningStatus => _calculatorService.Status;
    bool isRunning => _calculatorService.IsRunning;
    async Task RunCalculator()
    {
        await using var timer = new Timer(_ => InvokeAsync(() => StateHasChanged()));
        timer.Change(TimeSpan.FromMilliseconds(500), TimeSpan.FromMilliseconds(500));
        await _calculatorService.Run();
    }
    async Task Save()
    {
        try
        {
            _context ??= _dbFactory.CreateDbContext();
            
            _context.SaveChanges(); 
        }
        catch (Exception e)
        {
            _notificationService.NotifyError(name, "Failed to save Onboarding time settings!");
            throw;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        SaveState.OnSaveEvent += (o, e) =>
        {
            Save();
        };
        try
        {
            _context ??= _dbFactory.CreateDbContext();
            globalSettings = _context.GlobalMetricSettings.First(x => x.Id == 1);
        }
        catch (Exception e)
        {
            _notificationService.NotifyError(name, "Failed to load settings!");
            throw;
        }
        await base.OnInitializedAsync();
    }

    void IDisposable.Dispose()
    {
        _context?.Dispose();
    }
}
