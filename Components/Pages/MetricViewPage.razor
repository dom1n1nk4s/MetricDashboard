@page "/metrics/{_metricName}"
@using MetricDashboard.Data.Enums
@using MetricDashboard.Data.Models
@using MetricDashboard.Helpers
@using Microsoft.Extensions.Localization
@inject NavigationManager _navigation

@inject IDbContextFactory<ApplicationDbContext> _dbFactory
@inject IStringLocalizer<Locales.Resources> L
@rendermode InteractiveServer

<div class="center-content">
    <div class="container">
        <div class="row">
            <div class="col-md-8 offset-md-2 center-column">
                <div class="border my-4">
                    <RadialComponent Settings="metric.RadialSettings" PointerValue="pointerValue" />
                    <hr />
                    <RadzenText Text="@L[_metricName + ".Name"]" />
                </div>
                <div class="description border p-4">
                    <RadzenText Text="@L[_metricName + ".Desc"]" />
                </div>
                <div class="border p-4">
                    <RadzenText Text="Objects affecting score" />
                    @if (objectsAffectingScore != null && objectsAffectingScore.Any())
                    {
                        <RadzenPanel>
                            <RadzenHeading Size="H3">Objects affecting score</RadzenHeading>
                            <RadzenListBox Data="@objectsAffectingScore" TValue="string" Style="max-height: 300px;">
                                <Template Context="item">
                                    <div>@item</div>
                                </Template>
                            </RadzenListBox>
                        </RadzenPanel>
                    }
                    else
                    {
                        <p>No objects to display.</p>
                    }
                </div>

                @if (chartItems.Any())
                {
                    <RadzenChart>
                        <RadzenLineSeries Smooth="true" Data="@chartItems" CategoryProperty="Date" ValueProperty="Value" Title="Values">
                            <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" />
                            <RadzenSeriesDataLabels Visible="false" />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Padding="20" />
                        <RadzenValueAxis FormatString="{0:N}">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="@L[_metricName + ".Name"]" />
                        </RadzenValueAxis>
                    </RadzenChart>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .center-content {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
    }

    .center-column {
        text-align: center;
    }
</style>


@code {
    [Parameter]
    public string _metricName { get; set; }

    MetricEnum _metricType;
    ApplicationDbContext _context;
    Metric metric;
    string[] objectsAffectingScore = Array.Empty<string>();
    double pointerValue;
    ChartItem[] chartItems = Array.Empty<ChartItem>();

    protected override void OnParametersSet()
    {
        if (!Enum.TryParse<MetricEnum>(_metricName, true, out _metricType))
        {
            _navigation.NavigateTo("/404");
        }

        _context ??= _dbFactory.CreateDbContext();
        var globalSettings = _context.GlobalMetricSettings.AsNoTracking().First(x => x.Id == 1);
        metric = _context.Metrics.AsNoTracking().Include(x => x.RadialSettings).ThenInclude(x => x.ColorRanges)
            .First(x => x.MetricEnum == _metricType);
        chartItems = _context.MetricResults.AsNoTracking().Where(x => x.MetricEnum == _metricType && x.TimeScope == globalSettings.Scope)
        .GroupBy(x => x.Date.Date).Select(x => x.OrderByDescending(y => y.Date).First())
        .AsEnumerable().Select(x => new ChartItem
            {
                Date = x.Date.ToShortDateString(),
                Value = x.Score,
            }).ToArray();
        var metricResult = _context.MetricResults.Where(x => x.MetricEnum == _metricType).OrderByDescending(x => x.Date).FirstOrDefault();
        pointerValue = metricResult?.Score ?? default;
        if (metricResult?.ObjectsAffectingScore != null)
        {
            objectsAffectingScore = Helper.GetObjectsAffectingScore(_metricType, metricResult.ObjectsAffectingScore);
        }
        base.OnParametersSet();
    }
}