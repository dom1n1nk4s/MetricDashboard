@using Atlassian.Jira
@using MetricDashboard.Data.Models
@using MetricDashboard.Services
@using Microsoft.Extensions.Localization
@using static MetricDashboard.Components.Pages.MetricSettings.MetricFieldSetSettings
@implements IDisposable
@inject NavigationManager _navigation
@inject NotificationService _notificationService
@inject IDbContextFactory<ApplicationDbContext> _dbFactory
@inject JiraService _jiraService
@inject IStringLocalizer<Locales.Resources> L

<RadzenFieldset Text="Onboarding time" AllowCollapse=true>
    <RadzenStack>
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="2">
                <RadzenLabel Text="Onboarding related task" Component="taskInput" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenAutoComplete @bind-Value=@onboardingTaskInput Data=@issues LoadData=@OnLoadData Style="width: 13rem" />
            </RadzenColumn>
        </RadzenRow>
        <GenericRadialSettingsComp MetricEnum="_metricType" />
    </RadzenStack>
</RadzenFieldset>

@code {
    [CascadingParameter]
    public SaveState SaveState { get; set; }
    string name => @L[_metricType.ToString() + ".Name"];
    MetricEnum _metricType => MetricEnum.ONBOARDING_TIME;
    string onboardingTaskInput { get; set; }
    ApplicationDbContext _context;

    Jira _jira;
    IEnumerable<string> issues;

    async Task OnLoadData(LoadDataArgs args)
    {
        if (!string.IsNullOrWhiteSpace(args.Filter))
        {
            issues = _jira.Issues.Queryable.Where(x => x.JiraIdentifier.StartsWith(args.Filter)).AsEnumerable().Select(x => x.Key.Value).ToList();
        }
    }

    async Task Save()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(onboardingTaskInput))
            {
                _notificationService.NotifyError(name, "Invalid Onboarding task id entered.");
                return;
            }

            Issue taskInJira = null!;
            try
            {
                taskInJira = await _jira.Issues.GetIssueAsync(onboardingTaskInput);
            }
            catch (Exception e)
            {
                _notificationService.NotifyError(name, "Invalid Onboarding task id entered.");
                return;
            }

            _context ??= _dbFactory.CreateDbContext();

            var metricDao = _context.Metrics.First(x => x.MetricEnum == _metricType);
            var settings = metricDao.Settings?.Deserialize<OnboardingTimeSettings>() ?? new();
            settings.OnboardingTaskId = onboardingTaskInput;
            metricDao.Settings = settings.Serialize();

            _context.SaveChanges(); //this might cause problems later on when saving a shit ton of data at once
        }
        catch (Exception e)
        {
            _notificationService.NotifyError(name, "Failed to save Onboarding time settings!");
            throw;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        SaveState.OnSaveEvent += (o, e) =>
        {
            Save();
        };
        _jira = _jiraService.GetInstance();
        try
        {
            _context ??= _dbFactory.CreateDbContext();
            var metric = _context.Metrics.AsNoTracking().First(x => x.MetricEnum == _metricType);
            onboardingTaskInput = metric.Settings?.Deserialize<OnboardingTimeSettings>()?.OnboardingTaskId ?? string.Empty;
        }
        catch (Exception e)
        {
            _notificationService.NotifyError(name, "Failed to load settings!");
            throw;
        }
        await base.OnInitializedAsync();
    }

    void IDisposable.Dispose()
    {
        _context?.Dispose();
    }
}
