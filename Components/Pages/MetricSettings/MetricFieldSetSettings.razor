@inject NotificationService _notificationService
<RadzenStack>
    <CascadingValue Value="saveState">
        <GlobalMetricSettingsComp/>
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.BUG_COUNT" />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.BUSINESS_VALUE_PERCENTAGE" />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.CHANGE_FAILURE_RATE" />
        <ClientSatSurveySettingsComp />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.CODE_INTEGRATION_TIME" />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.CODE_REVIEW_PARTICIPATION" />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.CODE_TASK_MERGE_COMMIT_COUNT" />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.DEPLOYMENT_FREQUENCY" />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.FAILED_DEPLOYMENT_RECOVERY_TIME" />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.LEAD_TIME_FOR_CHANGES" />
        <OnboardingTimeSettingsComp />
        <SatSurveySettingsComp />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.TASK_HANDOVERS_BEFORE_COMPLETION" />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.TIME_SPENT_WORKING" />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.WORKER_RETENTION_RATE" />
        <GenericXMetricSettingsComp MetricEnum="MetricEnum.WORKFLOW_INTERRUPTION_TIME" />
    </CascadingValue>
</RadzenStack>
<RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success" Click="SaveAll" />
@code {

    SaveState saveState = new();
    void SaveAll()
    {
        saveState.OnSaveEvent.Invoke(this, EventArgs.Empty);
        _notificationService.NotifySuccess("Successfully saved settings!");
    }
}
