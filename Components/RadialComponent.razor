@using System.Collections.Generic
@using Radzen.Blazor

<RadzenRadialGauge Style="@Style">
    <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="@(Length/10)" Min="0" Max="@Length" TickPosition=GaugeTickPosition.Inside>
        <RadzenRadialGaugeScalePointer Value="@PointerValue" Length="0.6" ShowValue="true">
            <Template Context="pointer">
                <h4>
                    @pointer.Value
                </h4>
            </Template>
        </RadzenRadialGaugeScalePointer>
        @{
            int previousRangeTo = 0;
            foreach (var range in Ranges)
            {
                int fromValue = previousRangeTo;
                int toValue = range.range;
                previousRangeTo = toValue;
                <RadzenRadialGaugeScaleRange From="@fromValue" To="@toValue" Fill="@range.color" />
            }
        }
    </RadzenRadialGaugeScale>
</RadzenRadialGauge>

@code { //TODO: implement color from and to setting saving with possible multiple values.
    // also implement scoring overrides (onboarding time yellow is worth 7 or smth.)
    [Parameter]
    public int Length { get; set; } = 260;

    [Parameter]
    public (string color, int range)[] Ranges { get; set; }

    [Parameter]
    public int PointerValue { get; set; }

    [Parameter]
    public string Style { get; set; }
}
